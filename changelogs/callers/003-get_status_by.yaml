databaseChangeLog:
    - changeSet:
        id: create_get_status_by
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |                        
                    CREATE OR REPLACE FUNCTION callers.get_status_by(
                        p_company TEXT,
                        p_broker INT,
                        batch_name TEXT,
                        process_date TIMESTAMPTZ
                    )
                        RETURNS TABLE(status TEXT, crm JSONB, csv JSONB)
                        VOLATILE
                        LANGUAGE plpgsql
                    AS $$
                        DECLARE
                            v_dispatcher_id INT;
                            json_args_csv       TEXT;
                            json_args_crm       TEXT;
                            src_tbl             TEXT;
                            join_col            TEXT;
                            status_col          TEXT;
                            join_sql            TEXT;
                            dyn_sql             TEXT;
                            condition_sql       TEXT;
                            p_tbl               TEXT;
                            p_company_code      TEXT := lower(p_company);
                            p_broker_code       INT := p_broker::INT;
                            p_broker_name       TEXT;
                        BEGIN
                            -- Validando que existan parámetros
                            IF p_company_code IS NULL OR p_broker_code IS NULL THEN
                                RETURN;
                            END IF;

                            -- Obteniendo el dispatcher_id para toda la lógica driven by data
                            SELECT csd.id, csd.tbl, bi.name
                                INTO v_dispatcher_id, p_tbl, p_broker_name
                            FROM config.dispatcher csd
                            JOIN config.broker_info bi ON bi.id = csd.broker_id
                            WHERE csd.company = p_company_code
                            AND bi.npn       = p_broker_code
                            LIMIT 1;

                            -- Validando que haya sido obtenido
                            IF v_dispatcher_id IS NULL THEN
                                RETURN;
                            END IF;

                            -- construyendo los valores necesarios para la lógica del crm y csv
                            json_args_crm := builders.args_crm();
                            json_args_csv := builders.args_csv(v_dispatcher_id);
                            
                            --Obteniendo el nombre real de la columna ID
                            SELECT inf.column_name
                                INTO join_col
                            FROM config.input_field inf
                            JOIN config.fields f ON inf.field_id = f.id
                            WHERE inf.dispatcher_id = v_dispatcher_id
                            AND f.field_name = 'member_id'
                            LIMIT 1;

                            --Obteniendo el nombre real de la columna status
                            SELECT inf.column_name
                                INTO status_col
                            FROM config.input_field inf
                            JOIN config.fields f ON inf.field_id = f.id
                            WHERE inf.dispatcher_id = v_dispatcher_id
                            AND f.field_name = 'policy_status'
                            LIMIT 1;

                            IF p_company_code = 'molina' OR p_company_code = 'aetna' THEN
                                join_sql := format(
                                    'company.%1$I = data.member_id',
                                    join_col               -- %1$I → identificador de columna
                                );
                            ELSE
                                join_sql := format(
                                    'helpers.member_id_match(company.%1$I, data.member_id)',
                                    join_col              -- %1$I → identificador de columna
                                );
                            END IF;

                            -- Concatenamos el resto de la consulta
                            join_sql := join_sql || format(
                                ' AND data.company = %1$L AND data.broker  = %2$L',
                                initcap(p_company),        -- %1$L → literal para company
                                upper(p_broker_name)       -- %2$L → literal para broker (en mayúsculas)
                            );

                            condition_sql := format(
                                '(
                                    data.company = %L
                                    AND data.broker  = %L
                                )
                                OR
                                (
                                    data.company IS NULL
                                    AND company.%I <> %L
                                )',
                                initcap(p_company), UPPER(p_broker_name), status_col, 'Inactive'
                            );

                            dyn_sql := builders.query(p_company_code, p_broker_code, join_sql, json_args_crm, json_args_csv, condition_sql, batch_name, process_date, p_tbl);

                            RETURN QUERY EXECUTE dyn_sql
                                USING p_company_code, p_broker_code
                            WHERE status = 'Update';
                        END;
                    $$;
        rollback:
            - sql:
                splitStatements: false
                stripComments: true
                sql: DROP FUNCTION IF EXISTS callers.get_status_by(TEXT,INT,TEXT,TIMESTAMPTZ);
