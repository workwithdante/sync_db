databaseChangeLog:
    - changeSet:
        id: create_evaluate_status
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |                        
                    CREATE OR REPLACE FUNCTION callers.evaluate_status(
                        input_data_csv JSONB,
                        input_data_crm JSONB
                    ) 
                        RETURNS TEXT
                        STABLE
                        LANGUAGE plpgsql
                    AS $$
                        DECLARE
                            rule RECORD;
                            fn_schema TEXT;
                            fn_name TEXT;
                            fqfn TEXT;
                            r_out config.rule_out;
                        BEGIN
                            FOR rule IN
                                SELECT rule_fn, result_label
                                FROM config.rules
                                ORDER BY priority
                            LOOP
                                -- 1) Con el OID (rule.rule_fn) sacamos el schema y el nombre real:
                                SELECT n.nspname, p.proname
                                    INTO fn_schema, fn_name
                                    FROM pg_proc p
                                    JOIN pg_namespace n ON n.oid = p.pronamespace
                                WHERE p.oid = rule.rule_fn;

                                -- 2) Construimos el identificador calificado y seguro:
                                fqfn := quote_ident(fn_schema) || '.' || quote_ident(fn_name);

                                -- 3) Ejecutamos la llamada forzando el par√°metro a jsonb
                                EXECUTE format(
                                    'SELECT * FROM %s($1::jsonb, $2::jsonb)',
                                    fqfn
                                )
                                INTO r_out
                                USING input_data_csv, input_data_crm;

                                IF r_out.applies THEN
                                    RETURN COALESCE(r_out.label_out, rule.result_label);
                                END IF;
                            END LOOP;
                            
                            RETURN 'Unknown';
                        END;
                    $$;
        rollback:
            - sql:
                splitStatements: false
                stripComments: true
                sql: DROP FUNCTION IF EXISTS callers.evaluate_status(JSONB,JSONB);
