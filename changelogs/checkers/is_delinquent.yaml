databaseChangeLog:
  - changeSet:
        id: checker_is_delinquent
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION checkers.is_delinquent(input_data_csv JSONB, input_data_crm JSONB)
                        RETURNS config.rule_out
                        LANGUAGE plpgsql
                        STABLE
                    AS $$
                        DECLARE
                            paid_through_date           DATE := parsers.parse_date_mixed(input_data_csv ->> 'paid_through_date');
                            paid_through_date_crm       DATE := parsers.parse_date_mixed(input_data_crm ->> 'paid_through_date');
                            sales_date                  DATE := parsers.parse_date_mixed(input_data_crm ->> 'sales_date');
                            last_day_last_month         DATE := helpers.last_day_last_month();
                            last_day_of_month           DATE := helpers.last_day_curdate();
                            problems                    BOOLEAN;
                            ticket                      TEXT[] := helpers.get_tickets(input_data_crm);
                            out_rec                     config.rule_out;
                        BEGIN
                            out_rec.applies := (
                                paid_through_date IS NULL and sales_date < last_day_last_month)
                                OR (paid_through_date < last_day_of_month 
                                AND (paid_through_date >= paid_through_date_crm OR paid_through_date_crm IS NULL)
                            );

                            problems := ticket && ARRAY['PROBLEMA PAGO', 'PROBLEMA CAMP', 'PAGO', 'CANCELACIÃ“N', 'BAJAR DE LA BD'];

                            IF out_rec.applies AND problems THEN
                                out_rec.label_out := 'Delinquent with ticket';
                            ELSE
                                out_rec.label_out := NULL;
                            END IF;
                            
                            RETURN out_rec;
                        END;
                    $$;

            - sql:
                sql: |
                    INSERT INTO config.rules(rule_fn, result_label, priority) VALUES
                        ('checkers.is_delinquent(jsonb,jsonb)'::regprocedure, 'Delinquent', 40)
                    ON CONFLICT (rule_fn)
                    DO UPDATE
                        SET priority = EXCLUDED.priority;
        rollback:
            - sql:
                sql: |
                    DELETE FROM config.rules WHERE rule_fn = 'checkers.is_delinquent(jsonb,jsonb)'::regprocedure;
                    DROP FUNCTION IF EXISTS checkers.is_delinquent(JSONB, JSONB);