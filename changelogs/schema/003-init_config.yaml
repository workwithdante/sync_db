databaseChangeLog:
  - changeSet:
      id: create_schema_config
      author: workwithdante
      changes:
        - sql:
            sql: "CREATE SCHEMA IF NOT EXISTS config;"

  - changeSet:
      id: create_table_broker_info
      author: workwithdante
      changes:
        - createTable:
            tableName: broker_info
            schemaName: config
            columns:
              - column:
                  name: id
                  type: serial
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: name
                  type: text
                  constraints:
                    nullable: false
              - column:
                  name: npn
                  type: int
                  constraints:
                    nullable: false
                    unique: true

  - changeSet:
      id: insert_broker_info
      author: workwithdante
      changes:
        - insert:
            tableName: broker_info
            schemaName: config
            columns:
              - column:
                  name: name
                  value: "Beatriz Sierra"
              - column:
                  name: npn
                  value: "8602276"
        - insert:
            tableName: broker_info
            schemaName: config
            columns:
              - column:
                  name: name
                  value: "Ana Daniella Corrales"
              - column:
                  name: npn
                  value: "19011307"

  - changeSet:
      id: create_table_dispatcher
      author: workwithdante
      changes:
        - createTable:
            tableName: dispatcher
            schemaName: config
            columns:
              - column:
                  name: id
                  type: serial
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: company
                  type: text
                  constraints:
                    nullable: false
              - column:
                  name: broker_id
                  type: int
                  constraints:
                    nullable: false
              - column:
                  name: tbl
                  type: TEXT
                  constraints:
                    nullable: false

        - addUniqueConstraint:
            schemaName: config
            tableName: dispatcher
            columnNames: company,broker_id
            constraintName: unique_company_broker

        - addForeignKeyConstraint:
            baseTableSchemaName: config
            baseTableName: dispatcher
            baseColumnNames: broker_id
            constraintName: fk_dispatcher_broker
            referencedTableSchemaName: config
            referencedTableName: broker_info
            referencedColumnNames: id
            onUpdate: CASCADE
            onDelete: RESTRICT

  - changeSet:
      id: insert_dispatcher_data
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              INSERT INTO config.dispatcher (company, broker_id, tbl)
              SELECT vals.company, bi.id, vals.tbl
              FROM (
                  VALUES
                    ('oscar',    8602276, 'bs'),
                    ('oscar',    19011307, 'adc'),
                    ('aetna',    8602276, 'bs'),
                    ('molina',   8602276, 'bs'),
                    ('ambetter', 8602276, 'bs'),
                    ('ambetter', 19011307, 'adc')
              ) AS vals(company, broker_code, tbl)
              JOIN config.broker_info bi
                ON bi.npn = vals.broker_code
              ON CONFLICT (company, broker_id) DO NOTHING;


  - changeSet:
      id: create_table_fields
      author: workwithdante
      changes:
        - createTable:
            schemaName: config
            tableName: fields
            columns:
              - column:
                  name: id
                  type: serial
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: field_name
                  type: text
                  constraints:
                    nullable: false
                    unique: true
              - column:
                  name: mandatory
                  type: boolean
                  defaultValueBoolean: false
                  constraints:
                    nullable: false
      rollback:
        - dropTable:
            schemaName: config
            tableName: fields
            cascade: true

  - changeSet:
      id: load_or_update_fields
      author: workwithdante
      changes:
        - loadUpdateData:
            schemaName: config
            tableName: fields
            primaryKey: field_name
            file: changelogs/config/fields.csv
      rollback:
        - delete:
            schemaName: config
            tableName: fields
            where: "field_name IS NOT NULL"
  
  - changeSet:
      id: create_table_input_field
      author: workwithdante
      changes:
        - createTable:
            schemaName: config
            tableName: input_field
            columns:
              - column:
                  name: dispatcher_id
                  type: int
                  constraints:
                    nullable: false
              - column:
                  name: field_id
                  type: int
                  constraints:
                    nullable: false
              - column:
                  name: column_name
                  type: text
                  constraints:
                    nullable: false

        - addPrimaryKey:
            schemaName: config
            tableName: input_field
            columnNames: dispatcher_id,field_id
            constraintName: pk_input_field

        - addForeignKeyConstraint:
            baseTableSchemaName: config
            baseTableName: input_field
            baseColumnNames: field_id
            constraintName: fk_input_field_field
            referencedTableSchemaName: config
            referencedTableName: fields
            referencedColumnNames: id
            onDelete: CASCADE

  - changeSet:
      id: insert_config_input_field_data
      author: workwithdante
      changes:
        - sql:
            sql: |
              INSERT INTO config.input_field(dispatcher_id, field_id, column_name)
              SELECT d.id, f.id, vals.column_name
              FROM (
                VALUES
                  ('policy_status',       'policy_status'),
                  ('member_id',           'Policy Number'),
                  ('termination_date',    'Policy Term Date'),
                  ('premium',             'Member Responsibility'),
                  ('broker_end_date',     'Broker Term Date'),
                  ('initial_date',        'Policy Effective Date'),
                  ('paid_through_date',   'Paid Through Date'),
                  ('payment_type',        'Autopay')
              ) AS vals(param_name, column_name)
              JOIN config.fields       f  ON f.field_name = vals.param_name
              JOIN config.dispatcher   d  ON d.company    = 'ambetter'
              JOIN config.broker_info bi ON bi.id       = d.broker_id
                                         AND bi.name     = 'Beatriz Sierra'
              ON CONFLICT (dispatcher_id, field_id)
                DO UPDATE SET column_name = EXCLUDED.column_name;

        - sql:
            sql: |
              INSERT INTO config.input_field(dispatcher_id, field_id, column_name)
              SELECT d.id, f.id, vals.column_name
              FROM (
                VALUES
                  ('policy_status',           'policy_status'),
                  ('member_id',               'Policy Number'),
                  ('termination_date',        'Policy Term Date'),
                  ('premium',                 'Member Responsibility'),
                  ('broker_termination_date', 'Broker Term Date'),
                  ('initial_date',            'Policy Effective Date'),
                  ('paid_through_date',       'Paid Through Date'),
                  ('payment_type',            'Autopay')
              ) AS vals(param_name, column_name)
              JOIN config.fields       f  ON f.field_name = vals.param_name
              JOIN config.dispatcher   d  ON d.company    = 'ambetter'
              JOIN config.broker_info bi ON bi.id       = d.broker_id
                                         AND bi.name     = 'Ana Daniella Corrales'
              ON CONFLICT (dispatcher_id, field_id)
                DO UPDATE SET column_name = EXCLUDED.column_name;

        - sql:
            sql: |
              INSERT INTO config.input_field(dispatcher_id, field_id, column_name)
              SELECT d.id, f.id, vals.column_name
              FROM (
                VALUES
                  ('policy_status',            'Policy status'),
                  ('member_id',                'Member ID'),
                  ('termination_partial_date', 'Coverage end date'),
                  ('premium',                  'Premium amount'),
                  ('effective_partial_date',   'Coverage start date'),
                  ('paid_through_date',        'paid_through_date'),
                  ('payment_type',             'Autopay')
              ) AS vals(param_name, column_name)
              JOIN config.fields       f  ON f.field_name = vals.param_name
              JOIN config.dispatcher   d  ON d.company    = 'oscar'
              JOIN config.broker_info bi ON bi.id       = d.broker_id
                                         AND bi.name     = 'Beatriz Sierra'
              ON CONFLICT (dispatcher_id, field_id)
                DO UPDATE SET column_name = EXCLUDED.column_name;

        - sql:
            sql: |
              INSERT INTO config.input_field(dispatcher_id, field_id, column_name)
              SELECT d.id, f.id, vals.column_name
              FROM (
                VALUES
                  ('policy_status',            'Policy status'),
                  ('member_id',                'Member ID'),
                  ('termination_partial_date', 'Coverage end date'),
                  ('premium',                  'Premium amount'),
                  ('effective_partial_date',   'Coverage start date'),
                  ('paid_through_date',        'paid_through_date'),
                  ('payment_type',             'Autopay')
              ) AS vals(param_name, column_name)
              JOIN config.fields       f  ON f.field_name = vals.param_name
              JOIN config.dispatcher   d  ON d.company    = 'oscar'
              JOIN config.broker_info bi ON bi.id       = d.broker_id
                                         AND bi.name     = 'Ana Daniella Corrales'
              ON CONFLICT (dispatcher_id, field_id)
                DO UPDATE SET column_name = EXCLUDED.column_name;

        - sql:
            sql: |
              INSERT INTO config.input_field(dispatcher_id, field_id, column_name)
              SELECT d.id, f.id, vals.column_name
              FROM (
                VALUES
                  ('policy_status',           'policy_status'),
                  ('member_id',               'HIX_ID'),
                  ('termination_date',        'End_Date'),
                  ('premium',                 'Member_Premium'),
                  ('broker_termination_date', 'Broker_End_Date'),
                  ('initial_date',            'Effective_date'),
                  ('paid_through_date',       'Paid_Through_Date')
              ) AS vals(param_name, column_name)
              JOIN config.fields       f  ON f.field_name = vals.param_name
              JOIN config.dispatcher   d  ON d.company    = 'molina'
              JOIN config.broker_info bi ON bi.id       = d.broker_id
                                         AND bi.name     = 'Beatriz Sierra'
              ON CONFLICT (dispatcher_id, field_id)
                DO NOTHING;

        - sql:
            sql: |
              INSERT INTO config.input_field(dispatcher_id, field_id, column_name)
              SELECT d.id, f.id, vals.column_name
              FROM (
                VALUES
                  ('policy_status',           'Financial Status'),
                  ('member_id',               'Issuer Assigned ID'),
                  ('paid_through_date',       'Paid Through Date'),
                  ('effective_partial_date',  'Effective Date')
              ) AS vals(param_name, column_name)
              JOIN config.fields       f  ON f.field_name = vals.param_name
              JOIN config.dispatcher   d  ON d.company    = 'aetna'
              JOIN config.broker_info bi ON bi.id       = d.broker_id
                                         AND bi.name     = 'Beatriz Sierra'
              ON CONFLICT (dispatcher_id, field_id)
                DO NOTHING;

  - changeSet:
      id: create_type_rule_out
      author: workwithdante
      changes:
        - sql:
            sql: |
              CREATE TYPE config.rule_out AS (
                applies   BOOLEAN,
                label_out TEXT
              );
      rollback:
        - sql:
            sql: |
              DROP TYPE IF EXISTS config.rule_out;

  - changeSet:
      id: create_table_status_results
      author: workwithdante
      changes:
        - sql:
            sql: |
              CREATE TABLE IF NOT EXISTS config.status_results (
                  id            SERIAL,
                  process_date  TIMESTAMP NOT NULL,
                  batch_name    TEXT      NOT NULL,
                  company       TEXT      NOT NULL,
                  broker        INT       NOT NULL,
                  status        TEXT      NOT NULL,
                  crm_data      JSONB,
                  csv_data      JSONB,
                  review        TEXT      DEFAULT NULL,
                  description   TEXT      DEFAULT NULL,
                  PRIMARY KEY (id, process_date)
              ) PARTITION BY RANGE (process_date);
      rollback:
        - sql:
            dbms: postgresql
            sql: |
              DROP TABLE IF EXISTS config.status_results CASCADE;

  - changeSet:
      id: create_table_status_type
      author: workwithdante
      changes:
        - createTable:
            schemaName: config
            tableName: status_type
            columns:
              - column:
                  name: id
                  type: serial
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: name
                  type: text
                  constraints:
                    nullable: false
                    unique: true
              - column:
                  name: error
                  type: boolean
                  defaultValueBoolean: false
                  constraints:
                    nullable: false

  - changeSet:
      id: load_update_status_type
      author: workwithdante
      changes:
        - loadUpdateData:
            schemaName: config
            tableName: status_type
            primaryKey: name
            file: changelogs/config/status_type.csv

  - changeSet:
      id: create_table_review_type
      author: workwithdante
      changes:
        - createTable:
            schemaName: config
            tableName: review_type
            columns:
              - column:
                  name: id
                  type: serial
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: name
                  type: text
                  constraints:
                    nullable: false
                    unique: true
              - column:
                  name: error
                  type: boolean
                  defaultValueBoolean: false
                  constraints:
                    nullable: false

  - changeSet:
      id: load_update_review_type
      author: workwithdante
      changes:
        - loadUpdateData:
            schemaName: config
            tableName: review_type
            primaryKey: name
            file: changelogs/config/review_type.csv