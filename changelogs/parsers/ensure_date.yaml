databaseChangeLog:
    - changeSet:
        id: parser_ensure_date_text
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION parsers.ensure_date(val TEXT)
                        RETURNS DATE
                        LANGUAGE plpgsql
                    AS $$
                        BEGIN
                            IF val IS NULL OR TRIM(val) = '' THEN
                                RETURN NULL;
                            END IF;
                            
                            BEGIN RETURN val::DATE; EXCEPTION WHEN others THEN NULL; END;
                            BEGIN RETURN TO_DATE(val, 'YYYY-MM-DD'); EXCEPTION WHEN others THEN NULL; END;
                            BEGIN RETURN TO_DATE(val, 'YYYY/MM/DD'); EXCEPTION WHEN others THEN NULL; END;
                            BEGIN RETURN TO_DATE(val, 'MM/DD/YYYY'); EXCEPTION WHEN others THEN NULL; END;
                            BEGIN RETURN TO_DATE(val, 'MM-DD-YYYY'); EXCEPTION WHEN others THEN NULL; END;
                            RETURN NULL;
                        END;
                    $$;
        rollback:
            - sql:
                sql: DROP FUNCTION IF EXISTS parsers.ensure_date(TEXT) CASCADE;

    - changeSet:
        id: parser_ensure_date_date
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION parsers.ensure_date(val DATE)
                        RETURNS DATE
                        LANGUAGE plpgsql
                    AS $$
                        BEGIN RETURN val; END;
                    $$;
        rollback:
            - sql:
                sql: DROP FUNCTION IF EXISTS parsers.ensure_date(DATE) CASCADE;

    - changeSet:
        id: parser_ensure_date_timestamp
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION parsers.ensure_date(val TIMESTAMP)
                        RETURNS DATE
                        LANGUAGE plpgsql
                    AS $$
                        BEGIN RETURN val::DATE; END;
                    $$;
        rollback:
            - sql:
                sql: DROP FUNCTION IF EXISTS parsers.ensure_date(TIMESTAMP) CASCADE;

    - changeSet:
        id: parser_ensure_date_timestamptz
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION parsers.ensure_date(val TIMESTAMPTZ)
                        RETURNS DATE
                        LANGUAGE plpgsql
                    AS $$
                        BEGIN RETURN val::DATE; END;
                    $$;
        rollback:
            - sql:
                sql: DROP FUNCTION IF EXISTS parsers.ensure_date(TIMESTAMPTZ) CASCADE;
    
    - changeSet:
        id: parser_broker_code
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION parsers.broker_code(broker TEXT)
                        RETURNS TEXT
                        LANGUAGE sql
                        IMMUTABLE
                    AS $$
                        SELECT lower(string_agg(substr(word,1,1),'' ORDER BY idx))
                        FROM unnest(string_to_array(broker,' ')) WITH ORDINALITY AS t(word,idx);
                    $$;
        rollback:
            - sql:
                sql: DROP FUNCTION IF EXISTS parsers.broker_code(TEXT) CASCADE;

    - changeSet:
        id: parser_parse_date_mixed
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION parsers.parse_date_mixed(val TEXT)
                        RETURNS DATE
                        LANGUAGE sql
                        IMMUTABLE
                    AS $$
                        SELECT CASE
                        WHEN val IS NULL THEN NULL
                        WHEN val ~ '^\d{4}-\d{2}-\d{2}$' THEN val::DATE
                        WHEN val ~ '^\d{1,2}/\d{1,2}/\d{4}$' THEN to_date(val, 'MM/DD/YYYY')
                        ELSE NULL
                        END;
                    $$;
        rollback:
            - sql:
                sql: DROP FUNCTION IF EXISTS parsers.parse_date_mixed(TEXT) CASCADE;
