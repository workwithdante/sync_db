databaseChangeLog:
    - changeSet:
        id: create_fn_ensure_date_text
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION company.ensure_date(val TEXT)
                        RETURNS DATE
                    AS $$
                    BEGIN
                        IF val IS NULL OR TRIM(val) = '' THEN
                            RETURN NULL;
                        END IF;
                        
                        BEGIN RETURN val::DATE; EXCEPTION WHEN others THEN NULL; END;
                        BEGIN RETURN TO_DATE(val, 'YYYY-MM-DD'); EXCEPTION WHEN others THEN NULL; END;
                        BEGIN RETURN TO_DATE(val, 'YYYY/MM/DD'); EXCEPTION WHEN others THEN NULL; END;
                        BEGIN RETURN TO_DATE(val, 'MM/DD/YYYY'); EXCEPTION WHEN others THEN NULL; END;
                        BEGIN RETURN TO_DATE(val, 'MM-DD-YYYY'); EXCEPTION WHEN others THEN NULL; END;
                        RETURN NULL;
                    END;
                    $$ LANGUAGE plpgsql;
        rollback:
            - sql:
                sql: DROP FUNCTION IF EXISTS company.ensure_date(TEXT) CASCADE;

    - changeSet:
        id: create_fn_ensure_date_date
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION company.ensure_date(val DATE)
                        RETURNS DATE
                        LANGUAGE plpgsql
                    AS $$
                        BEGIN RETURN val; END;
                    $$;
        rollback:
            - sql:
                sql: DROP FUNCTION IF EXISTS company.ensure_date(DATE) CASCADE;

    - changeSet:
        id: create_fn_ensure_date_timestamp
        author: workwithdante
        runOnChange: true
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION company.ensure_date(val TIMESTAMP)
                        RETURNS DATE
                        LANGUAGE plpgsql
                    AS $$
                        BEGIN RETURN val::DATE; END;
                    $$;
        rollback:
            - sql:
                sql: DROP FUNCTION IF EXISTS company.ensure_date(TIMESTAMP) CASCADE;

    - changeSet:
        id: create_fn_ensure_date_timestamptz
        author: workwithdante
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION company.ensure_date(val TIMESTAMPTZ)
                        RETURNS DATE
                        LANGUAGE plpgsql
                    AS $$
                        BEGIN RETURN val::DATE; END;
                    $$;
        rollback:
            - sql:
                sql: DROP FUNCTION IF EXISTS company.ensure_date(TIMESTAMPTZ) CASCADE;
    
    - changeSet:
        id: create_fn_broker_code
        author: workwithdante
        changes:
            - sql:
                splitStatements: false
                stripComments: true
                sql: |
                    CREATE OR REPLACE FUNCTION company.broker_code(broker TEXT)
                        RETURNS TEXT
                        LANGUAGE sql
                        IMMUTABLE
                    AS $$
                        SELECT lower(string_agg(substr(word,1,1),'' ORDER BY idx))
                        FROM unnest(string_to_array(broker,' ')) WITH ORDINALITY AS t(word,idx);
                    $$;
        rollback:
            - sql:
                sql: DROP FUNCTION IF EXISTS company.broker_code(TEXT) CASCADE;