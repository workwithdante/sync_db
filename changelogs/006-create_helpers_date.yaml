databaseChangeLog:
  - changeSet:
      id: create_fn_ensure_date_text
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            dbms: postgresql
            sql: |
              CREATE OR REPLACE FUNCTION company.ensure_date(val TEXT) RETURNS DATE AS $$
              BEGIN
                  IF val IS NULL OR TRIM(val) = '' THEN
                      RETURN NULL;
                  END IF;
                  
                  BEGIN RETURN val::DATE; EXCEPTION WHEN others THEN NULL; END;
                  BEGIN RETURN TO_DATE(val, 'YYYY-MM-DD'); EXCEPTION WHEN others THEN NULL; END;
                  BEGIN RETURN TO_DATE(val, 'YYYY/MM/DD'); EXCEPTION WHEN others THEN NULL; END;
                  BEGIN RETURN TO_DATE(val, 'MM/DD/YYYY'); EXCEPTION WHEN others THEN NULL; END;
                BEGIN RETURN TO_DATE(val, 'MM-DD-YYYY'); EXCEPTION WHEN others THEN NULL; END;
                  RETURN NULL;
              END;
              $$ LANGUAGE plpgsql;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.ensure_date(TEXT) CASCADE;

  - changeSet:
      id: create_fn_ensure_date_date
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.ensure_date(val DATE) RETURNS DATE AS $$
              BEGIN RETURN val; END;
              $$ LANGUAGE plpgsql;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.ensure_date(DATE) CASCADE;

  - changeSet:
      id: create_fn_ensure_date_timestamp
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.ensure_date(val TIMESTAMP) RETURNS DATE AS $$
              BEGIN RETURN val::DATE; END;
              $$ LANGUAGE plpgsql;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.ensure_date(TIMESTAMP) CASCADE;

  - changeSet:
      id: create_fn_ensure_date_timestamptz
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.ensure_date(val TIMESTAMPTZ) RETURNS DATE AS $$
              BEGIN RETURN val::DATE; END;
              $$ LANGUAGE plpgsql;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.ensure_date(TIMESTAMPTZ) CASCADE;

  - changeSet:
      id: create_fn_normalize_member_id
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.normalize_member_id(input TEXT) RETURNS TEXT
              LANGUAGE sql IMMUTABLE AS $$
                SELECT split_part(input, '-', 1);
              $$;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.normalize_member_id(TEXT) CASCADE;

  - changeSet:
      id: create_fn_member_id_match
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.member_id_match(a TEXT, b TEXT) RETURNS BOOLEAN
              LANGUAGE sql IMMUTABLE AS $$
                SELECT company.normalize_member_id(a) = company.normalize_member_id(b);
              $$;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.member_id_match(TEXT, TEXT) CASCADE;

  - changeSet:
      id: create_fn_parse_date_mixed
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.parse_date_mixed(val TEXT) RETURNS DATE
              LANGUAGE sql IMMUTABLE AS $$
                SELECT CASE
                  WHEN val IS NULL THEN NULL
                  WHEN val ~ '^\d{4}-\d{2}-\d{2}$' THEN val::DATE
                  WHEN val ~ '^\d{1,2}/\d{1,2}/\d{4}$' THEN to_date(val, 'MM/DD/YYYY')
                  ELSE NULL
                END;
              $$;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.parse_date_mixed(TEXT) CASCADE;

  - changeSet:
      id: create_fn_broker_code
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.broker_code(broker TEXT) RETURNS TEXT
              LANGUAGE sql IMMUTABLE AS $$
                SELECT lower(string_agg(substr(word,1,1),'' ORDER BY idx))
                FROM unnest(string_to_array(broker,' ')) WITH ORDINALITY AS t(word,idx);
              $$;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.broker_code(TEXT) CASCADE;

  - changeSet:
      id: create_fn_last_day_curdate
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.last_day_curdate() RETURNS TEXT
              LANGUAGE sql IMMUTABLE AS $$
                SELECT (date_trunc('month', current_date) + INTERVAL '1 month' - INTERVAL '1 day')::DATE;
              $$;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.last_day_curdate() CASCADE;

  - changeSet:
      id: create_fn_last_day_curyear
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.last_day_curyear() RETURNS TEXT
              LANGUAGE sql IMMUTABLE AS $$
                SELECT make_date(EXTRACT(YEAR FROM current_date)::int,12,31)::DATE;
              $$;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.last_day_curyear() CASCADE;

  - changeSet:
      id: create_fn_last_day_last_year
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.last_day_last_year() RETURNS TEXT
              LANGUAGE sql IMMUTABLE AS $$
                SELECT (make_date(EXTRACT(YEAR FROM current_date)::int,12,31) - INTERVAL '1 year')::DATE;
              $$;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.last_day_last_year() CASCADE;

  - changeSet:
      id: create_fn_last_day_last_month
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.last_day_last_month() RETURNS TEXT
              LANGUAGE sql IMMUTABLE AS $$
                SELECT (date_trunc('month', current_date) - INTERVAL '1 day')::DATE;
              $$;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.last_day_last_month() CASCADE;

  - changeSet:
      id: create_fn_last_day_two_last_month
      author: workwithdante
      changes:
        - sql:
            splitStatements: false
            stripComments: true
            sql: |
              CREATE OR REPLACE FUNCTION company.last_day_two_last_month() RETURNS TEXT
              LANGUAGE sql IMMUTABLE AS $$
                SELECT (date_trunc('month', current_date) - INTERVAL '1 month' - INTERVAL '1 day')::DATE;
              $$;
      rollback:
        - sql:
            sql: DROP FUNCTION IF EXISTS company.last_day_two_last_month() CASCADE;
